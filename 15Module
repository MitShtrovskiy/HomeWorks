import UIKit

/*
 1. Создайте перечисление для ошибок. Добавьте в него 3 кейса:
 
 ошибка 400,
 ошибка 404,
 ошибка 500.
 Далее создайте переменную, которая будет хранить в себе какую-либо ошибку (400 или 404 или 500). И при помощи do-catch сделайте обработку ошибок перечисления. Для каждой ошибки должно быть выведено сообщение в консоль.
 
 */

enum StatusCodeError: Error{
    case error400
    case error404
    case error500
}

var error400 = false
var error404 = true
var error500 = false


// 2. Теперь добавьте проверку переменных в генерирующую функцию и обрабатывайте её!
func statusCode() throws {
    if error400 {throw StatusCodeError.error400}
    if error404 {throw StatusCodeError.error404}
    if error500 {throw StatusCodeError.error500}
}
do{
    try statusCode()
}
catch StatusCodeError.error400{
    print("Некорректный запрос")
}
catch StatusCodeError.error404{
    print("Не найдено")
}
catch StatusCodeError.error500{
    print("Внутренняя ошибка сервера")
}

// 3. Напишите функцию, которая будет принимать на вход два разных типа и проверять: если типы входных значений одинаковые, то вывести сообщение “Yes”, в противном случае — “No”.
func typeMatching <T: Equatable, E: Equatable> (_ a: T, _ b: E ) -> Void{
    let firstType = type(of: a)
    let secondType = type(of: b)
    if firstType == secondType {
        print("Yes")
    }
    else{
        print("No")
    }
}

typeMatching(false, true)
// typeMatching(10, true)

// 4. Реализуйте то же самое, но если тип входных значений различается, выбросите исключение. Если тип одинаковый — тоже выбросите исключение, но оно уже будет говорить о том, что типы одинаковые.
enum MatchingError: Error{
    case equalityType
    case inequalityType
}

var firstVar = "String"
var secondVar = 10

func equalityType <T: Equatable, E: Equatable> (_ a: T, _ b: E ) throws  -> Void{
    let first = type(of: a)
    let second = type(of: b)
    if first == second {throw MatchingError.equalityType}
    if first != second {throw MatchingError.inequalityType}
}
do{
    try equalityType(firstVar, secondVar)
}
catch MatchingError.equalityType{
    print("Yes")
}
catch MatchingError.inequalityType{
    print("No")
}

// 5. Напишите функцию, которая принимает на вход два любых значения и сравнивает их при помощи оператора равенства ==
func comparisonOfValues <T: Equatable> (_ a: T, _ b: T ){
    if a == b {
        return print("Значения идентичны")
    }
    return print("Значения различны")
}
comparisonOfValues(10, 10)
